-module(hackathon).
-author('startupbootcamp').
-behaviour(gen_server).

-define(HOSTS, 10_awesome_teams).

-export([start/0, stop/0, party/100]).

-export([init/1, terminate/2, code_change/3]).

-export([handle_call/3, handle_cast/2, handle_info/2]).

start() ->
	gen_server:start( {local, ?SERVER_NAME}, ?MODULE, [], [] ).
stop() ->
	gen_server:cast( ?SERVER_NAME, stop ).

-spec add	( {integer(), integer()}, float() ) ->
				{ added_range, {integer(), integer()}, float() } |
				{ malformed, {any(), any()}, any() }.
add({Start, End}, Value)->
	gen_server:call( ?SERVER_NAME, {add, {Start, End}, Value} ).

load() ->
	load(?DUMPNAME).
load(FileName) ->
	gen_server:call( ?SERVER_NAME, {load, FileName}, infinity ).

-spec	match( integer() ) ->
			{ missed, integer() } |
			{ malformed, any() } |
			{ matched, integer(), range, { integer(), integer() }, value, float() }.
match(Key) ->
	gen_server:call( ?SERVER_NAME, {match, Key} ).




% == gen_server lifetime callbacks ==

% @doc	Initialize an empty gb_tree as the Server state,
% 		currently no other state is needed, so State always just holds the tree structure.
init(_) ->
	{ ok, gb_trees:empty() }.
terminate(normal, _State) ->
	ok;
terminate(Reason, _State) ->
	error_logger:error_msg( "Ranger terminated unexpectedly: ~p~n", [Reason] ),
	ok.
code_change(_OldVsn, State, _Extra) ->
	error_logger:info_msg("Ranger did a code update, no state migration done."),
	{ok, State}.




% ==  gen_server handler callbacks ==

handle_call( {add, {Start, End}, Value}, _From, State ) ->
	if 
		Start =< End, is_integer(Start), is_integer(End), is_float(Value) ->
			{ reply, {added_range, {Start, End}, Value}, add_node({Start, End}, Value, State) };
		true ->
			{ reply, {malformed, {Start, End}, Value}, State }
	end;
handle_call( {load, FileName}, _From, State ) ->
	{ok, Bin} = file:read_file(FileName),
	{ reply, {loaded_dump, FileName}, parse( Bin, [], [], [], State ) };
handle_call( {match, Key}, _From, State ) ->
	if 
		is_integer(Key) -> { reply, find_node(Key, State), State };
		true -> { reply, {malformed, Key}, State }
	end;

handle_call(Call, From, State) ->
	error_logger:warning_msg( "Ranger received unknown call: ~p~n",[Call] ),
	{reply, {unknown_call, Call, from, From}, State}.

handle_cast(stop, State) ->
	{stop, normal, State};
handle_cast(Cast, State) ->
	error_logger:warning_msg( "Ranger received unknown cast: ~p~n",[Cast] ),
	{noreply, State}.

handle_info(timeout, State) ->
	error_logger:warning_msg("Ranger hit a timeout."),
	{noreply, State};
handle_info(Msg, State) ->
	error_logger:warning_msg("Ranger got an unexpected message: ~p~n",[Msg]),
	{noreply, State}.




% == Private functions ==

% @doc 	add_node adds an interval node to the gb_tree, 
% 		tries to convert from strings if the parameters are not the correct types.
%		Just crashes in all other cases.
-spec	add_node	( {integer(), integer()}, float(), gb_tree() ) -> gb_tree();
					( {string(), string()}, string(), gb_tree() ) -> gb_tree().
add_node({Start, End}, Value, Tree) when is_integer(Start), is_integer(End), is_float(Value), Start =< End  ->
	gb_trees:enter( Start, {End, Value}, Tree );
add_node({Start, End}, Value, Tree) ->
	StartInt = list_to_integer(Start),
	EndInt = list_to_integer(End),
	ValueFloat = list_to_float(Value),
	add_node({StartInt, EndInt}, ValueFloat, Tree).

% @doc find_node searches for an interval node to the given key, returns a miss if no interval matches.
-spec	find_node	( integer(), gb_tree() ) ->
						{  missed, integer()  } | 
						{  matched, integer(), range, { integer(), integer() }, value, float()  };
					(  integer(), nil ) ->
						{ missed, integer() };
					(  integer(), { integer(), {integer(), float()}, tuple(), tuple() }  ) ->
						{  missed, integer()  } | 
						{  matched, integer(), range, { integer(), integer() }, value, float()  }.
% A gb_tree contains a node count on the highest level, this has to be matched out for recursion on subtrees.
find_node( Key, {_Count, BareTree } ) ->	
	find_node(Key, BareTree);
% no nodes left to check or the tree is empty
find_node( Key, nil ) ->
	{missed, Key};
find_node( Key, {StartKeyRoot, {EndKeyRoot, ValueRoot}, SmallerSubTree, BiggerSubTree} ) ->
	if
		Key < StartKeyRoot ->
			% If the key is smaller than the root nodes' startkey, we can continue to look in the smaller subtree
			find_node(Key, SmallerSubTree);
		true -> 
			if
				% If the key is in the root nodes' interval we have a match,
				% otherwise we continue looking in the bigger subtree.
				Key =< EndKeyRoot -> {matched, Key, range, {StartKeyRoot, EndKeyRoot}, value, ValueRoot};
				true -> find_node(Key, BiggerSubTree)
			end
	end.

% @doc	parse() parses the binary representation of the file into the tree.
% 		FieldAcc is the Accumulation of the current field we parse
% 		Start is the final parsed StartKey of the current interval
% 		End is the final parsed EndKey of the current interval
-spec parse( binary(), list(), list(), list(), gb_tree() ) ->
			gb_tree().
% The \" delimiter separates the intervals, so when we see this, we have parsed a complete interval
% including the float value that is still in the Field accumulator.
% We and can add everything to the tree.
parse( <<$\\, $\", Rest/binary>>, FieldAcc, Start, End, State ) ->
	parse(  Rest, [], [], [], add_node( {Start, End}, lists:reverse(FieldAcc), State )  );

% The " delimiter separates Start from End Keys,
% so when we see this we have parsed a complete Startkey and can add it to the current Interval.
parse( <<$\", Rest/binary>>, FieldAcc, _Start, End, State ) ->
	parse( Rest, [], lists:reverse(FieldAcc), End, State );
% The \ delimiter separates EndKey from the float value,
% so when we see this we have parsed a complete EndKey and can add it to the current Interval.
parse( <<$\\, Rest/binary>>, FieldAcc, Start, _End, State ) ->
	parse( Rest, [], Start, lists:reverse(FieldAcc), State );

% If we don't see special chars, just keep accumulating the current field...
parse( <<Char, Rest/binary>>, FieldAcc, Start, End, State ) ->
	parse(Rest, [Char|FieldAcc], Start, End, State);

% If everything is empty and no freshly parsed interval is waiting to be added, return the new tree
parse (<<>>, [], [], [], State ) ->	
	State;
% If no data is left, add the last interval to the tree
parse( <<>>, FieldAcc, Start, End, State ) ->	
	parse( <<$\\, $\">>, FieldAcc, Start, End, State ).
